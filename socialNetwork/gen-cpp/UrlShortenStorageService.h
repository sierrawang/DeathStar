/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef UrlShortenStorageService_H
#define UrlShortenStorageService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "social_network_types.h"

namespace social_network {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class UrlShortenStorageServiceIf {
 public:
  virtual ~UrlShortenStorageServiceIf() {}
  virtual void StoreUrls(const std::vector<Url> & target_urls) = 0;
};

class UrlShortenStorageServiceIfFactory {
 public:
  typedef UrlShortenStorageServiceIf Handler;

  virtual ~UrlShortenStorageServiceIfFactory() {}

  virtual UrlShortenStorageServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(UrlShortenStorageServiceIf* /* handler */) = 0;
  };

class UrlShortenStorageServiceIfSingletonFactory : virtual public UrlShortenStorageServiceIfFactory {
 public:
  UrlShortenStorageServiceIfSingletonFactory(const ::std::shared_ptr<UrlShortenStorageServiceIf>& iface) : iface_(iface) {}
  virtual ~UrlShortenStorageServiceIfSingletonFactory() {}

  virtual UrlShortenStorageServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(UrlShortenStorageServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<UrlShortenStorageServiceIf> iface_;
};

class UrlShortenStorageServiceNull : virtual public UrlShortenStorageServiceIf {
 public:
  virtual ~UrlShortenStorageServiceNull() {}
  void StoreUrls(const std::vector<Url> & /* target_urls */) override {
    return;
  }
};

typedef struct _UrlShortenStorageService_StoreUrls_args__isset {
  _UrlShortenStorageService_StoreUrls_args__isset() : target_urls(false) {}
  bool target_urls :1;
} _UrlShortenStorageService_StoreUrls_args__isset;

class UrlShortenStorageService_StoreUrls_args {
 public:

  UrlShortenStorageService_StoreUrls_args(const UrlShortenStorageService_StoreUrls_args&);
  UrlShortenStorageService_StoreUrls_args& operator=(const UrlShortenStorageService_StoreUrls_args&);
  UrlShortenStorageService_StoreUrls_args() noexcept {
  }

  virtual ~UrlShortenStorageService_StoreUrls_args() noexcept;
  std::vector<Url>  target_urls;

  _UrlShortenStorageService_StoreUrls_args__isset __isset;

  void __set_target_urls(const std::vector<Url> & val);

  bool operator == (const UrlShortenStorageService_StoreUrls_args & rhs) const
  {
    if (!(target_urls == rhs.target_urls))
      return false;
    return true;
  }
  bool operator != (const UrlShortenStorageService_StoreUrls_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UrlShortenStorageService_StoreUrls_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UrlShortenStorageService_StoreUrls_pargs {
 public:


  virtual ~UrlShortenStorageService_StoreUrls_pargs() noexcept;
  const std::vector<Url> * target_urls;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UrlShortenStorageService_StoreUrls_result__isset {
  _UrlShortenStorageService_StoreUrls_result__isset() : se(false) {}
  bool se :1;
} _UrlShortenStorageService_StoreUrls_result__isset;

class UrlShortenStorageService_StoreUrls_result {
 public:

  UrlShortenStorageService_StoreUrls_result(const UrlShortenStorageService_StoreUrls_result&);
  UrlShortenStorageService_StoreUrls_result& operator=(const UrlShortenStorageService_StoreUrls_result&);
  UrlShortenStorageService_StoreUrls_result() noexcept {
  }

  virtual ~UrlShortenStorageService_StoreUrls_result() noexcept;
  ServiceException se;

  _UrlShortenStorageService_StoreUrls_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const UrlShortenStorageService_StoreUrls_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const UrlShortenStorageService_StoreUrls_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UrlShortenStorageService_StoreUrls_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UrlShortenStorageService_StoreUrls_presult__isset {
  _UrlShortenStorageService_StoreUrls_presult__isset() : se(false) {}
  bool se :1;
} _UrlShortenStorageService_StoreUrls_presult__isset;

class UrlShortenStorageService_StoreUrls_presult {
 public:


  virtual ~UrlShortenStorageService_StoreUrls_presult() noexcept;
  ServiceException se;

  _UrlShortenStorageService_StoreUrls_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class UrlShortenStorageServiceClient : virtual public UrlShortenStorageServiceIf {
 public:
  UrlShortenStorageServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UrlShortenStorageServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void StoreUrls(const std::vector<Url> & target_urls) override;
  void send_StoreUrls(const std::vector<Url> & target_urls);
  void recv_StoreUrls();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UrlShortenStorageServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<UrlShortenStorageServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (UrlShortenStorageServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_StoreUrls(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UrlShortenStorageServiceProcessor(::std::shared_ptr<UrlShortenStorageServiceIf> iface) :
    iface_(iface) {
    processMap_["StoreUrls"] = &UrlShortenStorageServiceProcessor::process_StoreUrls;
  }

  virtual ~UrlShortenStorageServiceProcessor() {}
};

class UrlShortenStorageServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  UrlShortenStorageServiceProcessorFactory(const ::std::shared_ptr< UrlShortenStorageServiceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< UrlShortenStorageServiceIfFactory > handlerFactory_;
};

class UrlShortenStorageServiceMultiface : virtual public UrlShortenStorageServiceIf {
 public:
  UrlShortenStorageServiceMultiface(std::vector<std::shared_ptr<UrlShortenStorageServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UrlShortenStorageServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<UrlShortenStorageServiceIf> > ifaces_;
  UrlShortenStorageServiceMultiface() {}
  void add(::std::shared_ptr<UrlShortenStorageServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void StoreUrls(const std::vector<Url> & target_urls) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StoreUrls(target_urls);
    }
    ifaces_[i]->StoreUrls(target_urls);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class UrlShortenStorageServiceConcurrentClient : virtual public UrlShortenStorageServiceIf {
 public:
  UrlShortenStorageServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  UrlShortenStorageServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void StoreUrls(const std::vector<Url> & target_urls) override;
  int32_t send_StoreUrls(const std::vector<Url> & target_urls);
  void recv_StoreUrls(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
